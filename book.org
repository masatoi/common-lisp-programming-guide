# -*- Coding: utf-8; Mode: Org; -*-
#+STARTUP: indent

* Common Lispプログラミングガイド

* 1. はじめに


** 1.0 なぜCommon Lispか？

Common Lispは実用的な言語です。強力な言語機能と安定した言語仕様を備え、現代の技術環境における持続的な価値を持っています。
以下に、Common Lispを学ぶべき具体的な理由を述べます。

*高度な抽象化と柔軟性*:
Common Lispのマクロシステムや関数型プログラミングの特徴により、プログラマは高いレベルでの抽象化を行い、複雑な問題をシンプルなコンポーネントに分解して考えることができます。これにより、プログラムの柔軟性が高まり、変更や拡張が容易になります。

さらにCommon Lispはマルチパラダイム言語であり、関数型プログラミングだけでなく、手続き型やオブジェクト指向プログラミングなど、多様なプログラミングスタイルをサポートしています。この多様性により、特定のタスクに最適なパラダイムを選択できるため、プログラムの柔軟性が高まり、変更や拡張がより容易になります。このマルチパラダイムのアプローチは、Common Lispを非常に強力で汎用的な言語にしています。

*同図像性とメタプログラミング*:
Lispの最も顕著な特徴の一つは、その同図像性（homoiconicity）です。これは、プログラムがその言語自身のデータ構造で表現されるという特性を指し、Lispではプログラムコードとデータが共通の構造（S式）を持っているために実現されます。この同図像性にろり、Lispプログラムは自身のコードをデータとして扱い、コンパイル時や実行時に動的にそのコードを生成、変更、評価することが可能です。これはメタプログラミングと呼ばれ、非常に強力な抽象化手法の一つです。
具体的には、マクロを定義してコンパイル時にコードを変換したり、条件に応じてコードの動作を変更したりすることができます。

*対話的な開発とデバッグ*:
Common LispのREPL (Read-Eval-Print Loop) 環境は、対話的な開発を可能にし、即時のフィードバックを提供します。これにより、デバッグやテストのプロセスが大幅に効率化されます。

*安定した規格と強力な後方互換性*:
Common LispはANSIによって正式に規格化されており、言語仕様が非常に安定しています。この安定した基盤の上に、言語を拡張する柔軟な仕組みが組み込まれているため、規格が固定されていても、現代的な構文や機能はライブラリとして追加されてきました。このアプローチにより、後方互換性が強く保たれ、長期的なプロジェクトにおいても安心して使用することができます。

*スケーラビリティと効率*:
Common Lispの設計は、大規模なソフトウェアプロジェクトや高度なアルゴリズムにも対応できるスケーラビリティを持っています。動的な型付けや強力な最適化機能により、実行時の効率も優れています。

以上の点から、Common Lispは単なる古典的な言語を超え、現代の多様なプログラミングニーズに応える実用的な言語です。革新的な特徴と強力なツールセットにより、Common Lispは今日でも多くのプロジェクトや開発者にとって貴重な選択肢となっています。

** 1.1 Common Lispの歴史
*** 1.1.1 Lispの誕生と進化
**** 1.1.1.1 初期のLisp
Lispは1958年にジョン・マッカーシーと彼のチームによってマサチューセッツ工科大学で開発されました。
LispはFortranに次いで世界で2番目に古いプログラミング言語で、特に人工知能研究の分野で早くから重要な位置を占めていました。
その名前は、その基本的なデータ構造であるリスト処理（List Processing）に由来しています。

初期のLispは、関数型言語としての特徴を多く持っていました。関数はファーストクラスオブジェクトとして扱われ、変数に割り当てたり、他の関数に引数として渡すことが可能でした。また、再帰や条件式、高階関数、そして動的な型付けなど、当時としては進んだ概念が導入されました。

ジョン・マッカーシーがLispを設計した際、彼はコンピュータープログラムの数学的な表記法であるラムダ計算に深く影響を受けており、これがLispが持つ関数型言語の特性と、その後のプログラミング言語設計に対する影響につながっています。
初期のLispの実装は、主に研究機関や大学で行われ、その強力な抽象化能力と柔軟性により、研究者や開発者の間で急速に広まりました。

**** 1.1.1.2 Lispマシンの時代
**** 1.1.1.3 Common Lispの誕生
*** 1.1.2 Common Lispの発展
**** 1.1.2.1 標準化の取り組み
**** 1.1.2.2 主要な実装とその影響
**** 1.1.2.3 現代におけるLispコミュニティと発展
** 1.2 Common Lispの特徴と哲学
*** 1.2.1 多機能性と拡張性
**** 1.2.1.1 マクロシステム
**** 1.2.1.2 高度なオブジェクト指向システム (CLOS)
*** 1.2.2 対話的開発環境
**** 1.2.2.1 REPLの利点
**** 1.2.2.2 インタラクティブなデバッグと開発
*** 1.2.3 パフォーマンスと効率
**** 1.2.3.1 コンパイラの最適化
**** 1.2.3.2 実行時の効率とガーベジコレクション
** 1.3 Common Lispと他のプログラミング言語との比較
*** 1.3.1 プログラミングパラダイムの多様性
**** 1.3.1.1 命令型、関数型、オブジェクト指向
**** 1.3.1.2 マクロによる言語の拡張性
*** 1.3.2 Common Lispのユニークな特徴
**** 1.3.2.1 コードはデータ（ホモイコニシティ）
**** 1.3.2.2 強力なエラー処理と例外管理
*** 1.3.3 他言語との相互運用性
**** 1.3.3.1 外部ライブラリとの連携
**** 1.3.3.2 FFI (Foreign Function Interface) の利用

** 2. 環境構築
*** Common Lispの実装と開発環境
*** エディタとIDEの設定（Emacs, SLIME, LispWorks等）
*** パッケージ管理とライブラリ
** 3. 言語の基礎
*** データ型と変数
*** 関数とマクロ
*** 制御構造と例外処理
*** シーケンス、コレクション、イテレータ
** 4. 高度なトピック
*** 高階関数とラムダ式
*** オブジェクト指向（CLOS）
*** メタプログラミングとマクロ
*** コンパイラと実行時の最適化
** 5. 実践的なCommon Lisp
*** プロジェクトの構造とパッケージシステム
*** ユニットテストとデバッグ
*** パフォーマンスチューニング
** 6. Common Lispによるアプリケーション開発
*** Web開発（フレームワークとライブラリ）
**** clack, ningle, utopian
*** データベースとの連携
**** cl-dbi/mito
*** GUIアプリケーション
**** clog
** 7. Common Lispコミュニティとリソース
*** オープンソースプロジェクトと貢献
*** 主要なリファレンスと学習リソース
*** コミュニティとイベント
** 8. まとめと将来の展望
*** Common Lispの現状と将来性
*** Common Lispを学ぶためのアドバイス
*** Common Lispの進化とコミュニティの役割
